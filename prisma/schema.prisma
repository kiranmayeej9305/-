// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  ACCOUNT_OWNER
  ACCOUNT_ADMIN
  CHATBOT_USER
  CHATBOT_ADMIN
}

enum Icon {
  settings
  chart
  calendar
  check
  chip
  compass
  database
  flag
  home
  info
  link
  lock
  messages
  notification
  payment
  power
  receipt
  shield
  star
  tune
  videorecorder
  wallet
  warning
  headphone
  send
  pipelines
  person
  category
  contact
  clipboardIcon
}

model User {
  id           String         @id @default(uuid())
  name         String
  avatarUrl    String         @db.Text
  email        String         @unique
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  role         Role           @default(CHATBOT_USER)
  accountId    String?
  Account      Account?       @relation(fields: [accountId], references: [id], onDelete: Cascade)
  Permissions  Permissions[]
  Tickets      Ticket[]
  Notifications Notification[]
  TrainingHistories TrainingHistory[]
  ChatRooms    ChatRoom[]     @relation("AgentChatRooms") // Relation to chat rooms as an agent

  @@index([accountId])
}


model Permissions {
  id           String     @id @default(uuid())
  email        String
  User         User       @relation(fields: [email], references: [email], onDelete: Cascade)
  chatbotId String
  Chatbot   Chatbot @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
  access       Boolean

  @@index([chatbotId])
  @@index([email])
}

model Account {
  id               String                @id @default(uuid())
  connectAccountId String?               @default("")
  customerId       String                @default("")
  name             String
  accountLogo      String                @db.Text
  companyEmail     String                @db.Text
  companyPhone     String
  whiteLabel       Boolean               @default(true)
  address          String
  city             String
  zipCode          String
  state            String
  country          String
  goal             Int                   @default(5)
  users            User[]
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  Chatbot       Chatbot[]
  SidebarOption    AccountSidebarOption[]
  Invitation       Invitation[]
  Notification     Notification[]
  Subscription     Subscription?
  AddOns           AddOns[]
}

model AIModel  {
  id          String   @id @default(uuid())
  name        String
  provider    String
  apiUrl      String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  ChatbotSettings   ChatbotSettings[]
}


model ChatbotType {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  defaultPrompts String @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  ChatbotSettings   ChatbotSettings[]
}
model ChatbotSettings {
  id                  String   @id @default(uuid())
  chatbotId           String   @unique
  welcomeMessage      String?
  aiModelId           String
  chatbotTypeId       String
  knowledgeSources    String   // 'training', 'generic', 'both'
  creativityLevel     Float    // Value between 0 and 1
  customPrompts       String?  @db.Text
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  Chatbot             Chatbot  @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
  ChatbotType         ChatbotType @relation(fields: [chatbotTypeId], references: [id], onDelete: Cascade)
  AIModel             AIModel  @relation(fields: [aiModelId], references: [id], onDelete: Cascade)

  @@index([chatbotTypeId])
  @@index([aiModelId])
}
model Chatbot {
  id                  String                    @id @default(uuid())
  connectAccountId    String?                   @default("")
  name                String
  createdAt           DateTime                  @default(now())
  updatedAt           DateTime                  @updatedAt
  goal                Int                       @default(5)
  accountId           String
  Account             Account                    @relation(fields: [accountId], references: [id], onDelete: Cascade)
  SidebarOption       ChatbotSidebarOption[]
  Permissions         Permissions[]
  Funnels             Funnel[]
  Media               Media[]
  Contact             Contact[]
  Trigger             Trigger[]
  Automation          Automation[]
  Pipeline            Pipeline[]
  Tags                Tag[]
  Notification        Notification[]
  Interface           Interface?
  HelpDesk            HelpDesk[]
  FilterQuestions     FilterQuestions[]
  Product             Product[]
  Customer            Customer[]
  Campaign            Campaign[]
  TrainingHistories   TrainingHistory[]
  ChatbotSettings     ChatbotSettings?
  ChatRooms ChatRoom[]
  @@index([accountId])
}

model TrainingHistory {
  id           String     @id @default(uuid())
  chatbotId    String
  userId       String
  sourceType   String
  content      String?
  fileName     String?
  websiteUrl   String?
  question     String?
  answer       String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  Chatbot      Chatbot    @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
  User         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([chatbotId])
  @@index([userId])
}

model Tag {
  id           String   @id @default(uuid())
  name         String
  color        String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  chatbotId String

  Chatbot Chatbot @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
  Ticket     Ticket[]

  @@index([chatbotId])
}

model Pipeline {
  id           String     @id @default(uuid())
  name         String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  Lane         Lane[]
  Chatbot   Chatbot @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
  chatbotId String

  @@index([chatbotId])
}

model Lane {
  id         String   @id @default(uuid())
  name       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Pipeline   Pipeline @relation(fields: [pipelineId], references: [id], onDelete: Cascade)
  pipelineId String
  Tickets    Ticket[]
  order      Int      @default(0)

  @@index([pipelineId])
}

model Ticket {
  id          String   @id @default(uuid())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  laneId      String
  order       Int      @default(0)
  Lane        Lane     @relation(fields: [laneId], references: [id], onDelete: Cascade)
  value       Decimal?
  description String?
  Tags        Tag[]

  customerId String?
  Customer   Contact? @relation(fields: [customerId], references: [id], onDelete: SetNull)

  assignedUserId String?
  Assigned       User?   @relation(fields: [assignedUserId], references: [id], onDelete: SetNull)

  @@index([laneId])
  @@index([customerId])
  @@index([assignedUserId])
}

enum TriggerTypes {
  CONTACT_FORM
}

model Trigger {
  id           String       @id @default(uuid())
  name         String
  type         TriggerTypes
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  chatbotId String
  Chatbot   Chatbot   @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
  Automations  Automation[]

  @@index([chatbotId])
}

model Automation {
  id                 String               @id @default(uuid())
  name               String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  triggerId          String?
  published          Boolean              @default(false)
  Trigger            Trigger?             @relation(fields: [triggerId], references: [id], onDelete: Cascade)
  chatbotId       String
  Chatbot         Chatbot           @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
  Action             Action[]
  AutomationInstance AutomationInstance[]

  @@index([triggerId])
  @@index([chatbotId])
}

model AutomationInstance {
  id           String     @id @default(uuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  automationId String
  Automation   Automation @relation(fields: [automationId], references: [id], onDelete: Cascade)
  active       Boolean    @default(false)

  @@index([automationId])
}

enum ActionType {
  CREATE_CONTACT
}

model Action {
  id           String     @id @default(uuid())
  name         String
  type         ActionType
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  automationId String
  order        Int
  Automation   Automation @relation(fields: [automationId], references: [id], onDelete: Cascade)
  laneId       String     @default("0")

  @@index([automationId])
}

model Contact {
  id           String   @id @default(uuid())
  name         String
  email        String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  chatbotId String

  Chatbot Chatbot @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
  Ticket     Ticket[]

  @@index([chatbotId])
}

model Media {
  id           String     @id @default(uuid())
  type         String?
  name         String
  link         String     @unique
  chatbotId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  Chatbot   Chatbot @relation(fields: [chatbotId], references: [id], onDelete: Cascade)

  @@index([chatbotId])
}

model Funnel {
  id            String       @id @default(uuid())
  name          String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  description   String?
  published     Boolean      @default(false)
  subDomainName String?      @unique
  favicon       String?      @db.Text
  chatbotId  String
  Chatbot    Chatbot   @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
  FunnelPages   FunnelPage[]
  liveProducts  String?      @default("[]")
  ClassName     ClassName[]

  @@index([chatbotId])
}

model ClassName {
  id         String   @id @default(uuid())
  name       String
  color      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  funnelId   String
  customData String?  @db.Text
  Funnel     Funnel   @relation(fields: [funnelId], references: [id], onDelete: Cascade)

  @@index([funnelId])
}

model FunnelPage {
  id           String   @id @default(uuid())
  name         String
  pathName     String   @default("")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  visits       Int      @default(0)
  content      String?  @db.Text
  order        Int
  previewImage String?  @db.Text
  funnelId     String
  Funnel       Funnel   @relation(fields: [funnelId], references: [id], onDelete: Cascade)

  @@index([funnelId])
}

model AccountSidebarOption {
  id        String   @id @default(uuid())
  name      String   @default("Menu")
  link      String   @default("#")
  icon      Icon     @default(info)
  accountId String
  parentId  String?  // This field is for submenu parent linkage
  isSubmenu Boolean  @default(false)
  Account   Account? @relation(fields: [accountId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([accountId])
}

model ChatbotSidebarOption {
  id        String   @id @default(uuid())
  name      String   @default("Menu")
  link      String   @default("#")
  icon      Icon     @default(info)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  chatbotId String?
  parentId  String?  // This field is for submenu parent linkage
  isSubmenu Boolean  @default(false)
  Chatbot   Chatbot? @relation(fields: [chatbotId], references: [id], onDelete: Cascade)

  @@index([chatbotId])
}

enum InvitationStatus {
  ACCEPTED
  REVOKED
  PENDING
}

model Invitation {
  id       String           @id @default(uuid())
  email    String           @unique
  accountId String
  Account   Account           @relation(fields: [accountId], references: [id], onDelete: Cascade)
  status   InvitationStatus @default(PENDING)
  role     Role             @default(CHATBOT_USER)

  @@index([accountId])
}

model Notification {
  id           String  @id @default(uuid())
  notification String
  accountId     String
  chatbotId String?
  userId       String

  User       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  Account     Account      @relation(fields: [accountId], references: [id], onDelete: Cascade)
  Chatbot Chatbot? @relation(fields: [chatbotId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([accountId])
  @@index([chatbotId])
  @@index([userId])
}

enum Plan {
  price_1PGDJZCVtIA4fkI2V8ufr2Hd
  price_1PIGjPCVtIA4fkI2I9z76rke
}

model Subscription {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  plan      Plan?
  price     String?
  active    Boolean  @default(false)

  priceId              String
  customerId           String
  currentPeriodEndDate DateTime
  subscritiptionId     String   @unique

  accountId String? @unique
  Account   Account? @relation(fields: [accountId], references: [id])

  @@index([customerId])
}

model AddOns {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  active    Boolean  @default(false)
  priceId   String   @unique
  accountId  String?
  Account    Account?  @relation(fields: [accountId], references: [id])

  @@index([accountId])
}
model ChatRoom {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  live        Boolean       @default(false)
  mailed      Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  customerId  String        @db.Uuid
  chatbotId   String        @db.Uuid
  agentId     String?       @db.Uuid // Added to link with an agent

  Customer    Customer      @relation(fields: [customerId], references: [id], onDelete: Cascade)
  Chatbot     Chatbot       @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
  Agent       User?         @relation("AgentChatRooms", fields: [agentId], references: [id], onDelete: Cascade)
  ChatMessages ChatMessage[]

  @@index([chatbotId])
  @@index([customerId])
  @@index([agentId])
}


model ChatMessage {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  message    String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  seen       Boolean   @default(false)
  chatRoomId String    @db.Uuid

  ChatRoom   ChatRoom  @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  sender     String?   // e.g., "customer", "chatbot", "agent"
}


model Bookings {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date       DateTime
  slot       String
  email      String
  Customer   Customer? @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId String?   @db.Uuid
  chatbotId   String?   @db.Uuid
  createdAt  DateTime  @default(now())
}

model Campaign {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  customers String[]
  template  String?
  Chatbot      Chatbot?    @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
  chatbotId    String?  @db.Uuid
  createdAt DateTime @default(now())
}

model Product {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  price     Int
  image     String
  createdAt DateTime @default(now())
  Chatbot    Chatbot?  @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
  chatbotId  String?  @db.Uuid
}

enum ChatbotRole {
  user
  assistant
}
model HelpDesk {
  id       String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  question String
  answer   String

  Chatbot   Chatbot? @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
  chatbotId String? @db.Uuid
}

model FilterQuestions {
  id        String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  question  String
  answered  Boolean @default(false)
  
  Chatbot   Chatbot? @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
  chatbotId String? @db.Uuid
}

model CustomerResponses {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  question     String
  responseText String?
  customerId   String    @db.Uuid

  Customer     Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)
}


model Customer {
  id        String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email     String?
  name      String?
  responses CustomerResponses[]
  chatRooms ChatRoom[]
  bookings  Bookings[]
  chatbotId String?   @db.Uuid 
  Chatbot   Chatbot?  @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
}



model Interface {
  id             String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  icon           String?
  userAvtar      String?
  chatbotAvtar   String?
  background     String?
  textColor      String?
  userMsgBackGroundColour String?
  chatbotMsgBackGroundColour String?
  helpdesk       Boolean @default(false)
  copyRightMessage String?
  Chatbot         Chatbot? @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
  chatbotId       String? @unique @db.Uuid
}
